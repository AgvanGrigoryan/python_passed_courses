##Inheritance introduction
class Person:# parent
    def can_breathe(self):
        print('I can breath')

    def can_walk(self):
        print('I can walk')

class Doctor(Person): #subclass
    def can_cure(self):
        print('I can Cure')

class Architect(Person):#subclass
    def can_build(self):
        print('I can build a building')


## task 1

class Vehicle:
    pass

class Plane(Vehicle):
    pass

class Boat(Vehicle):
    pass

class Car(Vehicle):
    pass

class RaceCar(Car):
    pass


##inheritance from object
##by default every classes is subclass of object
class Mylist(list):
    pass

##task 1
import math
class NewInt(int):
    def repeat(self,k:int=2):
        if k>0:
            return int(str(self)*k)
        else:
            print('Input only a Positive number')

    def to_bin(self):
        return int(bin(self)[2:])

    
##Overriding
##–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤, —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç—Å—è –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–µ –º–æ–¥–µ–ª–∏
##...

##  Extending
    
class Person:
    pass

class Doctor(Person):
    def sleep(self):
        print('Doctor speeps')

##p = Person()
##d = Doctor()


##Delegating
class Person:

    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        
    def breathe(self):
        print('Person Breathes')

class Doctor(Person):

    def __init__(self, name, surname, age):
        super().__init__(name,surname)
        self.age = age
        
    def breathe(self):
        print('Doctor Breathes')
        super().breathe()


##task 1

class Transport:
    def __init__(self, brand, max_speed, kind=None):
        self.brand = brand
        self.max_speed = max_speed
        self.kind = kind

    def __str__(self):
        return f"Transport type {self.kind} of brand {self.brand} can be accelerateed to {self.max_speed} km/h"


class Car(Transport):
    def __init__(self, brand, max_speed, mileage, gasoline_residue):
        super().__init__(brand,max_speed, 'Car')
        self.mileage = mileage
        self._gasoline_residue = 0
        self.gasoline = gasoline_residue

    @property
    def gasoline(self):
        return self._gasoline_residue

    @gasoline.setter
    def gasoline(self, value:int):
        if not isinstance(value,int):
            print("Car Fuel increass error")
        elif value>=0:
            self._gasoline_residue+=value
            print(f"Fuel volume is increased by {value} liters and is {self._gasoline_residue}liters")
        else:
            print("Don\'t steal fuelüßê")


class Boat(Transport):
    def __init__(self, brand, max_speed, owners_name:str):
        super().__init__(brand,max_speed, 'Boat')
        self.owners_name = owners_name

    def __str__(self):
        return f"{self.owners_name} owns the boat of brand {self.brand}"

class Plane(Transport):
    def __init__(self,brand, max_speed, capacity):
        super().__init__(brand,max_speed, 'Plane')
        self.capacity = capacity

    def __str__(self):
        return f"The plane of brand {self.brand} includes {self.capacity} peoples"
    



##task2

class Initialization:
    def __init__(self, capacity, food):
        if isinstance(capacity, int) and not isinstance(capacity, bool):
            self.capacity = capacity
            self.food = food
        else:
            print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")

    @property
    def food(self):
        return self._food
        
    @food.setter
    def food(self, value):
        if isinstance(value,(list, tuple)):
            self._food = value
        else:
            print("–£–∫–∞–∂–∏—Ç–µ food —Å–ø–∏—Å–∫–æ–º")


class Vegetarian(Initialization):
    def __init__(self,capacity, food):
        super().__init__(capacity, food)

    def __str__(self):
        return f"{self.capacity} –ª—é–¥–µ–π –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç –Ω–µ –µ—Å—Ç—å –º—è—Å–æ!–û–Ω–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç {self.food}"


class MeatEater(Initialization):
    def __init__(self, capacity, food):
        super().__init__(capacity,food)


    def __str__(self):
        return f"{self.capacity} –º—è—Å–æ–µ–¥–æ–≤ –≤ –ú–æ—Å–∫–≤–µ! –ü–æ–º–∏–º–æ –º—è—Å–∞ –æ–Ω–∏ –µ–¥—è—Ç –µ—â–µ –∏ {self.food}"


class SweetTooth(Initialization):
    def __init__(self, capacity, food):
        super().__init__(capacity, food)

    def __str__(self):
        return f"–°–ª–∞–¥–∫–æ–µ–∂–µ–∫ –≤ –ú–æ—Å–∫–≤–µ {self.capacity}. –ò–∑ —Å–∞–º–∞—è –ª—é–±–∏–º–∞—è –µ–¥–∞ {self.food}"
    
    def __eq__(self, other):
        if isinstance(other, Initialization):
            return self.capacity==other.capacity
        elif isinstance(other,int) and not isinstance(other,bool):
            return self.capacity == other
        else:
            return f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–¥–∫–æ–µ–∂–µ–∫ —Å {other}"
        

    def __lt__(self, other):
        if isinstance(other, Initialization):
            return self.capacity < other.capacity
        elif isinstance(other,int) and not isinstance(other,bool):
            return self.capacity < other
        else:
            return f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–¥–∫–æ–µ–∂–µ–∫ —Å {other}"
          

    def __gt__(self, other):
        if isinstance(other, Initialization):
            return self.capacity > other.capacity
        elif isinstance(other, int) and not isinstance(other, bool):
            return self.capacity > other
        else:
            return f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–¥–∫–æ–µ–∂–µ–∫ —Å {other}"


##–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ

class Doctor:
    def __init__(self, degree):
        self.degree = degree
    
    def can_cure(self):
        print('I am a Doctor, I can cure')

    def graduate(self):
        print('–£—Ä–∞ —è –æ—Ç—É—á–∏–ª—Å—è –Ω–∞ –¥–æ–∫—Ç–æ—Ä–∞')

class Builder:
    def __init__(self,rank):
        self.rank = rank
        
    def can_build(self):
        print('I am a Builder, i can build')

    def graduate(self):
        print('–£—Ä–∞ —è –æ—Ç—É—á–∏–ª—Å—è –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—è')


class Person(Doctor, Builder):
    def __init__(self, degree, rank):
        super().__init__(degree)
        Builder.__init__(self,rank)
    
    def can_breathe(self):
        print('I am a Person, I can breathes')

    def can_build(self):
        print('I am a Person, and I am also can build')

    def __str__(self):
        print(f'Person {self.rank} {self.degree}')

##–ï—Å–ª–∏ –¥–æ—á–µ—Ä–Ω–∏–π –∫–ª–∞—Å—Å –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∏–º–µ–Ω–µ–º
##–∫–∞–∫ —É —Ä–æ–¥–∏—Ç–µ–ª—è —Ç–æ –∫–∞–∫ –∏ –≤—Å–µ–≥–¥–∞ –∏—â–µ—Ç—Å—è —Å–Ω–∞—á–∞–ª–∞
##–≤ –¥–æ—á–µ—Ä–Ω–µ–º –∫–ª–∞—Å—Å–µ –ø–æ—Ç–æ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö,
##—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ—Ç–æ–¥ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –∫–ª–∞—Å—Å–∞

##—Å–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç—Å—è –º–µ—Ç–æ–¥ –∏–ª–∏ –∞—Ç—Ç—Ä–∏–±—É—Ç –≤ —Å–∞–º–æ–º —ç–∫–∑–µ–º–ª—è—Ä–µ –∫–ª–∞—Å—Å–∞,
##–µ—Å–ª–∏ –Ω–µ –Ω–∞–∑–æ–¥–∏—Ç —Ç–æ –ø–æ –ø–æ—Ä–∞–¥–∫—É –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
##–ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—è–º –∏ –∏—â–µ—Ç –º–µ—Ç–æ–¥ –∏–ª–∏ –∞—Ç—Ç—Ä–∏–±—É—Ç

        
## —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ instance_name.__mro__
##–º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –ø–æ–∏—Å–∫–∞ –º–µ—Ç–æ–¥–æ–≤



##MRO - Method Resolution order
##class A:
##    pass
##
##class B:
##    def hello(self):
##        print('hello from B')
##
##class C(A,B):
##    pass
##
##class D:
##    def hello(self):
##        print('hello from D')
##
##class E:
##    def hello(self):
##        print('hello from E')
##
##class F(D,E):
##    def hello(self):
##        print('hello from F')
##
##class G(C,F):
##    pass

class O: pass
class A(O): pass
class B(O): pass
class C(O): pass
class D(O): pass
class E(O): pass

class K1(C,A,B): pass
class K2(A,D): pass
class K3(B,D,E): pass

class Z(K1,K2,K3): pass

##print(Z.mro())


##Slots
##–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –∏ –ø–ª—é—Å—ã –°–ª–æ—Ç–æ–≤
##1. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∞—Ç—Ç—Ä–∏–±—É—Ç—ã, –æ–ø–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö,
##–Ω–µ–Ω—É–∂–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤ –≤ –∫–ª–∞—Å—Å

##2.–ó–∞–Ω–∏–º–∞–µ—Ç –ú–µ–Ω—å—à–µ –ø–∞–º—è—Ç–∏ –∏–∑-–∑–∞ —Ç–æ–≥–æ —á—Ç–æ —É –∫–ª–∞—Å—Å–∞
##–Ω–µ—Ç —Å–ª–æ–≤–∞—Ä—è __dict__ –∫–æ—Ç–æ—Ä—ã–π –∑–∞–Ω–∏–º–∞–µ—Ç
##–¥–æ–ø–æ–ª—å–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –ø–∞–º—è—Ç–∏

##3.–†–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ —á–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª–∞—Å—Å 


class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

class PointSlots:

    __slots__ = ('x', 'y')

    def __init__(self, x, y):
        self.x = x
        self.y = y


p = Point(3,4)
ps = PointSlots(3,4)

##–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞–º—è—Ç—å
##print(f'Point class without __slots__ Sizeof - {p.__sizeof__()}, __dict__ size {p.__dict__.__sizeof__()}')

##–£ –ö–ª–∞—Å—Å–∞ —Å —Å–ª–æ—Ç–∞–º–∏ –Ω–µ—Ç —Å–ª–æ–≤–∞—Ä—è __dict__
##print(f'PointSlots class with __slots__ Sizeof - {ps.__sizeof__()}, __slots__ size {ps.__slots__.__sizeof__()}')


from timeit import timeit
def Class_without_slots_speed():
    c = Point(6,7)
    c.x = 900
    c.y = 2
    c.y
    c.x
    del c.x
    del c.y

def Class_with_slots_speed():
    c = PointSlots(6,7)
    c.x = 900
    c.y = 2
    c.y
    c.x
    del c.x
    del c.y

##–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
##print("Class without slots speed - ",timeit(Class_without_slots_speed))
##print("Class with slots speed - ",timeit(Class_with_slots_speed))


##Working at Slots with property and inheritance

class Rectangle:
    __slots__ = ('__width', 'height')

    def __init__(self, a, b):
        self.width = a
        self.height = b

    @property
    def width(self):
        return self.__width
        
    @width.setter
    def width(self, value):
        print('setter called')
        self.__width = value
        
    @property
    def area(self):
        return self.width*self.height




class Square(Rectangle):
    __slots__ = 'color'

    def __init__(self, a, color):
        super().__init__(a,a)
        self.color = color







